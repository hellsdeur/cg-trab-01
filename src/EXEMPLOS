#BRESENHAM 1
linha = bresenham.Bresenham((15, -3), (-15, -15))
tela.Desenhar(linha.saida, azul)


#BRESENHAM 2
linha = bresenham.Bresenham((8, 7), (-15, 10))
tela.Desenhar(linha.saida, azul)


#BRESENHAM 3
linha = bresenham.Bresenham((5, -2), (5, 10))
tela.Desenhar(linha.saida, azul)


-------------------------
#POLILINHA
pts = [(3, 4), (-7, 1), (2, -9)]

linhas = polilinha.Polilinha(pts)
tela.Desenhar(linhas.saida, azul)


-------------------------

#CURVAS 1
c = curvas.Curvas(15, [(0, 0), (5, 5),(10,20), (20, 0)])
tela.Desenhar(c.saida, azul)


#CURVAS 2
c = curvas.Curvas(3, [(-4, 20), (0, -20), (20, 0)])
tela.Desenhar(c.saida, azul)


#CURVAS 3
c = curvas.Curvas(10, [(-14, 20), (-20, 10), (0, 0), (-8, -10)])
tela.Desenhar(c.saida, azul)


-------------------------


#CIRCULO 1
obj = circulo.Circulo({
    "centro": [6,3],
    "raio": 10
})
tela.Desenhar(obj.saida, azul)


#CIRCULO 2
obj = circulo.Circulo({
    "centro": [0,0],
    "raio": 5
})

tela.Desenhar(obj.saida, azul)


#CIRCULO 3
obj = circulo.Circulo({
    "centro": [11,-7],
    "raio": 7
})

tela.Desenhar(obj.saida, azul)



-------------------------


#PREENCHIMENTO RECURSIVO 1
pts = [(3, 4), (-7, 1), (2, -9)]

obj = polilinha.Polilinha(pts, fechar=True)
tela.Desenhar(obj.saida, azul)

pr = preenchimento_recursivo.Preenchimento((0,0), verde, azul, tela)


#PREENCHIMENTO RECURSIVO 2
pts = [(3, 4), (3, -2), (-5, -2), (-5, 4)]

obj = polilinha.Polilinha(pts, fechar=True)
tela.Desenhar(obj.saida, azul)

pr = preenchimento_recursivo.Preenchimento((2,2), verde, azul, tela)


-------------------------


#SCANLINE 1
pts = [(-4, 0), (8,-16), (20, 5)]

obj = varredura.Varredura(pts)
tela.Desenhar(obj.saida, azul)


#SCANLINE 2
pts = [(-6,-6), (8,-4), (8,12), (0,8), (-8,14)]

obj = varredura.Varredura(pts)
tela.Desenhar(obj.saida, azul)

obj = polilinha.Polilinha(pts, fechar=True)
tela.Desenhar(obj.saida, vermelho)


------------------------

#RECORTE DE LINHA 1
p1, p2 = (-7,-5),(15, 14)
xmin = -10
xmax = 2
ymin = -15
ymax = 1
obj = recorte_linha.RecorteLinha(p1, p2, xmin, xmax, ymin, ymax)
tela.destacarJanela(xmin, xmax, ymin, ymax)

tela.Desenhar(obj.saida, azul)


#RECORTE DE LINHA 2
p1, p2 = (-7,9),(1, 1)
xmin = -10
xmax = 2
ymin = -5
ymax = 10
obj = recorte_linha.RecorteLinha(p1, p2, xmin, xmax, ymin, ymax)
tela.destacarJanela(xmin, xmax, ymin, ymax)

tela.Desenhar(obj.saida, azul)


#RECORTE DE LINHA 3
p1, p2 = (-7,-6),(1, -8)
xmin = -10
xmax = 2
ymin = -5
ymax = 10
obj = recorte_linha.RecorteLinha(p1, p2, xmin, xmax, ymin, ymax)
tela.destacarJanela(xmin, xmax, ymin, ymax)

tela.Desenhar(obj.saida, azul)

-----------------------


#RECORTE DE POLIGONO 1
pts = [(-5,20),(-3, -1),(5, -2)]
xmin = -1
xmax = 10
ymin = -9
ymax = 9

obj = recorte_poligono.RecortePoligono(pts, xmin, xmax, ymin, ymax)
tela.destacarJanela(xmin, xmax, ymin, ymax)
tela.Desenhar(obj.saida, azul)

'''
poligono_original = polilinha.Polilinha(pts, fechar=True)
tela.Desenhar(poligono_original.saida, azul)
'''


#RECORTE DE POLIGONO 2
pts = [(-5,5),(-5, -5),(5, -5), (5, 5)]
xmin = -1
xmax = 10
ymin = -9
ymax = 9

obj = recorte_poligono.RecortePoligono(pts, xmin, xmax, ymin, ymax)
tela.destacarJanela(xmin, xmax, ymin, ymax)
tela.Desenhar(obj.saida, azul)

'''
poligono_original = polilinha.Polilinha(pts, fechar=True)
tela.Desenhar(poligono_original.saida, azul)
'''

-----------------------

# TRANSFORMAÇÃO 1
quadrado = [
    [0,0], [1,0], [2,0], [3,0],
    [3,1], [3,2], [3,3], [2,3],
    [1,3], [0,3], [0,2], [0,1]
]
objeto = transformacao.Transformacao(entrada=quadrado)
# objeto.translar(5,5)
# objeto.escalar(6, 6)
# objeto.rotacionar([3, 3], 90)

tela.Desenhar(objeto.saida, azul)



# TRANSFORMAÇÃO 2
quadrado = [
    [5, 5], [6, 5], [7, 5], [8, 5],
    [8, 6], [8, 7], [8, 8], [7, 8],
    [6, 8], [5, 8], [5, 7], [5, 6]
]
objeto = transformacao.Transformacao(entrada=quadrado)
# objeto.translar(5,5)
# objeto.escalar(1, 3)
# objeto.rotacionar([5, 5], 45)

tela.Desenhar(objeto.saida, azul)

-----------------------

# PROJEÇÃO
cubo = [
    [0, 0, 0], [3, 0, 0], [3, 3, 0], [0, 3, 0],
    [0, 0, 3], [3, 0, 3], [3, 3, 3], [0, 3, 3]
]

for coordenada in cubo:
    coordenada[2] += -10

objeto = projecao.Projecao(cubo)
objeto.projecao(plano="xy")
objeto.perspectiva(dist=-20)

tela.Desenhar(objeto.saida, azul)